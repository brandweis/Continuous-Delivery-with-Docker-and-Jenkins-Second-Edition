pipeline {
     agent {
	 docker {
	     image 'jenkins/inbound-agent'
	     args '--privileged -v /var/run/docker.sock:/var/run/docker.sock' 
	 }
     }

     environment {
         BUILD_TIMESTAMP = "${new Date().format('yyyyMMddHHmmss')}"
     }

     triggers {
          pollSCM('H/2 * * * *')
     }

     stages {
          stage("Checkout") {
	      steps {
		  git branch: 'master', credentialsId: 'github-creds', url: 'https://github.com/brandweis/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git'
	      }
	  }

	  stage("Install Java") {
	      steps {
		  sh """
		  apt-get update && apt-get install -y openjdk-17-jdk
	 	  export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
	      }
	  }

	  stage("Compile") {
               steps {
                   dir('Chapter08/sample1') {
                       sh "chmod +x gradlew"
                       sh "./gradlew compileJava"
                   }
               }
          }

          stage("Unit test") {
               steps {
                   dir('Chapter08/sample1') {
                       sh "./gradlew test"
                   }
               }
          }

	  stage("Check if Java Files Changed") {
	      steps{
		  script {
		      def changes = sh(script: "git diff --name-only HEAD~1", returnStdout: true).trim()
		      if (changes.contains('.java')) {
			  env.JAVA_FILES_CHANGED = 'true'
		      } else {
			  env.JAVA_FILES_CHANGED = 'false'
		      }
		  }
	      }
	  }

          stage("Code coverage") {
              when {
		  expression { env.JAVA_FILES_CHANGED == 'true' }
	      } 
	      steps {
                   dir('Chapter08/sample1') {
                       sh "./gradlew jacocoTestReport"
                       sh "./gradlew jacocoTestCoverageVerification"
                   }
               }
          }

          stage("Checkstyle Test") {
              when {
		  expression { env.JAVA_FILES_CHANGED == 'true' }
	      }
	      steps {
                  dir('Chapter08/sample1') {
                      sh "./gradlew checkstyleTest"
                  }
              }
          }

          stage("Static code analysis") {
               steps {
                   dir('Chapter08/sample1') {
                       sh "./gradlew checkstyleMain"
                   }
               }
          }

          stage("Package") {
               steps {
                   dir('Chapter08/sample1') {
                       sh "./gradlew build"
                   }
               }
          }

          stage("Docker build") {
               steps {
		   dir('Chapter08/sample1') {
                       sh "docker build -t leszko/calculator:${BUILD_TIMESTAMP} ."
                   }
	       }
          }

          stage("Docker login") {
               steps {
                    withDockerRegistry(credentialsId: 'dockerhub-credentials', url: 'https://index.docker.io/v1/') {
                         sh "echo \$DOCKER_HUB_PASSWORD | docker login -u brandweis --password-stdin"
                    }
               }
          }

          stage("Docker push") {
               steps {
                    sh "docker push brandweis/calculator:${BUILD_TIMESTAMP}"
               }
          }

          stage("Update version") {
               steps {
                    sh "sed  -i 's/{{VERSION}}/${BUILD_TIMESTAMP}/g' calculator.yaml"
               }
          }
          
          stage("Deploy to staging") {
               steps {
                    sh "kubectl config use-context staging"
                    sh "kubectl apply -f hazelcast.yaml"
                    sh "kubectl apply -f calculator.yaml"
               }
          }

          stage("Acceptance test") {
               steps {
                    sleep 60
                    sh "chmod +x acceptance-test.sh && ./acceptance-test.sh"
               }
          }

          stage("Release") {
               steps {
                    sh "kubectl config use-context production"
                    sh "kubectl apply -f hazelcast.yaml"
                    sh "kubectl apply -f calculator.yaml"
               }
          }

          stage("Smoke test") {
              steps {
                  sleep 60
                  sh "chmod +x smoke-test.sh && ./smoke-test.sh"
              }
          }
     }


     post {
         success { 
             publishHTML(target: [
                 reportDir: 'Chapter08/sample1/build/reports/checkstyle',
                 reportFiles: 'main.xml',
                 reportName: 'Jacoco Checkstyle Report'
             ])
	     echo "pipeline ran perfectly"
         }
         failure {
	     echo "pipeline failure"
         }
     }
}
