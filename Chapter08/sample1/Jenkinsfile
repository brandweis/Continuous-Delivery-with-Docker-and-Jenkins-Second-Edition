pipeline {
     agent any

     environment {
         BUILD_TIMESTAMP = "${new Date().format('yyyyMMddHHmmss')}"
     }

     triggers {
          pollSCM('H/2 * * * *')
     }

     stages {
          stage("Checkout") {
	      steps {
		  git branch: 'master', credentialsId: 'github-creds', url: 'https://github.com/brandweis/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git'
	      }
	  }

	  stage("Install Java") {
	      steps {
		  sh """
		  sudo apt-get update && sudo apt-get install -y openjdk-17-jdk
	 	  export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
		  export PATH=\$JAVA_HOME/bin:\$PATH
		  java -version
		  """
	      }
	  }

	  stage("Compile") {
               steps {
                   dir('Chapter08/sample1') {
                       sh "chmod +x gradlew"
                       sh "./gradlew compileJava"
                   }
               }
          }

          stage("Unit test") {
               steps {
                   dir('Chapter08/sample1') {
                       sh "./gradlew test"
                   }
               }
          }

	  stage("Check if Java Files Changed") {
	      steps{
		  script {
		      def changes = sh(script: "git diff --name-only HEAD~1", returnStdout: true).trim()
		      if (changes.contains('.java')) {
			  env.JAVA_FILES_CHANGED = 'true'
		      } else {
			  env.JAVA_FILES_CHANGED = 'false'
		      }
		  }
	      }
	  }

          stage("Code coverage") {
              when {
		  expression { env.JAVA_FILES_CHANGED == 'true' }
	      } 
	      steps {
                   dir('Chapter08/sample1') {
                       sh "./gradlew jacocoTestReport"
                       sh "./gradlew jacocoTestCoverageVerification"
                   }
               }
          }

          stage("Checkstyle Test") {
              when {
		  expression { env.JAVA_FILES_CHANGED == 'true' }
	      }
	      steps {
                  dir('Chapter08/sample1') {
                      sh "./gradlew checkstyleTest"
                  }
              }
          }

          stage("Static code analysis") {
               steps {
                   dir('Chapter08/sample1') {
                       sh "./gradlew checkstyleMain"
                   }
               }
          }

          stage("Package") {
               steps {
                   dir('Chapter08/sample1') {
                       sh "./gradlew build"
                   }
               }
          }

          stage("Docker build") {
               steps {
		   dir('Chapter08/sample1') {
                       sh "docker build -t leszko/calculator:${BUILD_TIMESTAMP} ."
                   }
	       }
          }

          stage("Docker login") {
               steps {	
                   withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'docker-creds', usernameVariable: 'USERNAME', 
		       passwordVariable: 'PASSWORD']]) {
                       sh "echo 'Using docker username: ${USERNAME}'"
		       sh "echo '${PASSWORD}' | docker login -u '${USERNAME}' --password-stdin"
		   } 
               }
          }

	  stage("Docker Build") {
	      steps {
		  script {
		      dir("Chapter08/sample1") { 
		          sh "docker build -t branweis/calculator:${BUILD_TIMESTAMP} ."
		      }
		  }
	      }
	  }

          stage("Docker push") {
               steps {
		   script {
		    sh "docker images branweis/calculator:${BUILD_TIMESTAMP}"
                    sh "docker push branweis/calculator:${BUILD_TIMESTAMP}"
		   }
               }
          }

          stage("Update version") {
               steps {
                    sh "sed  -i 's/{{VERSION}}/${BUILD_TIMESTAMP}/g' /var/jenkins_home/workspace/ex5-pipeline/Chapter08/sample1/calculator.yaml"
               }
          }

          stage("Acceptance test") {
               steps {
                    sleep 60
                    sh "chmod +x acceptance-test.sh && ./acceptance-test.sh"
               }
          }

          stage("Smoke test") {
              steps {
                  sleep 60
                  sh "chmod +x smoke-test.sh && ./smoke-test.sh"
              }
          }
     }


     post {
         success { 
             publishHTML(target: [
                 reportDir: 'Chapter08/sample1/build/reports/checkstyle',
                 reportFiles: 'main.xml',
                 reportName: 'Jacoco Checkstyle Report'
             ])
	     echo "pipeline ran perfectly"
         }
         failure {
	     echo "pipeline failure"
         }
     }
}
