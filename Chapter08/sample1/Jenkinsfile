pipeline {
    agent any

    environment {
        BUILD_TIMESTAMP = "${new Date().format('yyyyMMddHHmmss')}"
        GRADE_OPTS = "-Dorg.gradle.daemon=false"
        JACOCO_REPORT_DIR = "Chapter08/sample1/build/reports/jacoco/test/html"
    }

    triggers {
        issueCommentTrigger('.*test this please.*') // Optional: Manual trigger via PR comment
    }

    stages {
        stage("Checkout") {
            steps {
                checkout scm
            }
        }

        stage("Compile") {
            steps {
                dir('Chapter08/sample1') {
                    sh "chmod +x gradlew"
                    sh "./gradlew --no-daemon compileJava"
                }
            }
        }

        stage("Unit Test") {
            when {
                not { branch 'main' }
            }
            steps {
                dir('Chapter08/sample1') {
                    sh "./gradlew --no-daemon test"
                }
            }
        }

        stage("Integration Test") {
            when {
                not { branch 'main' }
            }
            steps {
                dir('Chapter08/sample1') {
                    sh "./gradlew --no-daemon integrationTest"
                }
            }
        }

        stage("Static Code Analysis") {
            when {
                not { branch 'main' }
            }
            steps {
                dir('Chapter08/sample1') {
                    sh "./gradlew --no-daemon checkstyleMain"
                }
            }
        }

        stage("Code Coverage") {
            when {
                branch 'main'
            }
            steps {
                dir('Chapter08/sample1') {
                    sh "./gradlew --no-daemon jacocoTestReport"
                }
            }
        }

        stage("JaCoCo Report") {
            steps {
                script {
                    publishHTML (target: [
                        reportDir: "${JACOCO_REPORT_DIR}",
                        reportFiles: 'index.html',
                        reportName: "JaCoCo Coverage Report"
                    ])
                }
            }
        }

        stage("Docker Build & Push") {
            when {
                expression { return env.BRANCH_NAME.contains('feature') || env.BRANCH_NAME.startsWith('PR-') }
            }
            steps {
                sh "sudo systemctl restart docker || echo 'Docker already running'"
                dir("Chapter08/sample1") { 
                    sh "docker build -t branweis/calculator:${BUILD_TIMESTAMP} ."
                    sh "docker push branweis/calculator:${BUILD_TIMESTAMP}"
                }
            }
        }

        stage("Docker push") {
            when {
                expression { return env.BRANCH_NAME.contains('feature') || env.BRANCH_NAME.startsWith('PR-') }
            }
            steps {
                script {
                    sh "docker images branweis/calculator:${BUILD_TIMESTAMP}"
                    sh "docker push branweis/calculator:${BUILD_TIMESTAMP}"
                }
            }
        }

        stage("Fail Pipeline") {
            when {
                not {
                    anyOf {
                        branch 'master'
                        expression { return env.BRANCH_NAME.contains('feature') || env.BRANCH_NAME.startsWith('PR-') }
                    }
                }
            }
            steps {
                echo 'This branch is neither master nor a feature branch. Failing the pipeline.'
                error 'Branch policy violation. Build failed.'
            }
        }
    }

    post {
        always {
            script {
                def testResult = currentBuild.result ?: 'SUCCESS'
                if (testResult == 'FAILURE') {
                    echo "tests fail!"
                } else {
                    echo "tests pass!"
                }
            }
        }
        success {
            echo "Pipeline ran perfectly!"
        }
        failure {
            echo "Pipeline failure."
        }
    }
}

