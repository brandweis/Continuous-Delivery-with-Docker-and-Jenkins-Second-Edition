pipeline {
    agent { label 'docker-agent' }  

    stages {
        stage('Checkout Code') {
            steps {
                echo "Checking out code from branch: ${env.BRANCH_NAME}"
                checkout scm
            }
        }

        stage('Compile Code') {
            steps {
                echo 'Compiling the application...'
                sh './gradlew compileJava'
            }
        }

        stage('Unit Tests') {
            steps {
                echo 'Running unit tests...'
                sh './gradlew test'
            }
        }

        stage('Static Code Analysis') {
            steps {
                echo 'Performing static code analysis...'
                sh './gradlew checkstyleMain'
            }
        }

        stage('Code Coverage') {
            when { branch 'main' }
            steps {
                echo 'Running code coverage tests on main branch...'
                sh './gradlew jacocoTestReport'
                sh './gradlew jacocoTestCoverageVerification'
            }
        }

        stage('Feature Branch Tests') {
            when {
                expression { return env.BRANCH_NAME.contains('feature') }
            }
            steps {
                echo 'Executing all tests except Code Coverage for a feature branch...'
            }
        }

        stage('Fail Pipeline') {
            when {
                not {
                    anyOf {
                        branch 'main'
                        expression { return env.BRANCH_NAME.contains('feature') }
                    }
                }
            }
            steps {
                echo 'This branch is neither main nor a feature branch. Failing the pipeline.'
                error 'Branch policy violation. Build failed.'
            }
        }
    }
}

